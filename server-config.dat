{
    "MyImouto":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						$page = [xml](Invoke-WebRequest -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\")
						if($limit -gt 0 -and $page.posts.count -gt $limit){
							if($pages){return [Math]::ceiling($limit/100)}
							return $limit
						}
						if($pages){return [Math]::ceiling($page.posts.count/100)}
						return $page.posts.count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						try{
							$postPage = Invoke-WebRequest -Uri \"$($ssconfig.url)/post/show/$id\"
						}catch{
							Write-Host \"The site couldn't be read. You've probably been temporarily blocked for too many queries.`nIf you are sure that this isn't the case, please submit a bug report on this program's Github repo.\"
							return $null
						}
						$tags=($postPage.images|where id -eq \"image\").alt.split(\" \")[0..4] -join \" \"
						$taggedPosts = [xml](Invoke-WebRequest -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\")
						if($taggedPosts.posts.post -eq $null){
							return $null
						}
						forEach($post in $taggedPosts.posts.post) {
							if($post.id -eq $id){
								if($raw){
									return $post
								}else{
									[dateTime]$timeOrigin = '1970-01-01 00:00:00'
									return @{id=$post.id;file=$post.file_url;uploaded=$timeOrigin.addSeconds($post.created_at);md5=$post.md5;tags=$post.tags;rating=$post.rating}
								}
							}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=1\u0026limit=$limit\")
						}else{
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=1\u0026limit=100\")
						}
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						[dateTime]$timeOrigin = '1970-01-01 00:00:00'
						$counter=0
						for ($i=2;$i -le [Math]::ceiling($currentPage.posts.count/100)+1;$i++){
						  forEach($post in $currentPage.posts.post){
							$creationTime = $timeOrigin.addSeconds($post.created_at)
							if($raw){
								$postArray += $post
							}else{
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=$post.tags;rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  $currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=$i\u0026limit=100\")
						  try{
							$currentPage = [xml]$currentPage
						  } catch [System.Management.Automation.RuntimeException] {
						  	$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						  }
						  if($limit -gt 0){
							Write-Host $('Read page ' + $($i-1) + '/' + [Math]::ceiling($limit/100) + '.')
						  }else{
							Write-Host $('Read page ' + $($i-1) + '/' + [Math]::ceiling($currentPage.posts.count/100) + '.')
						  }
						}
						return $postArray
						}"
                 },
				 
	"Gelbooru": {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						$page = [xml](Invoke-WebRequest -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\")
						if($limit -gt 0 -and $page.posts.count -gt $limit){
							if($pages){return [Math]::ceiling($limit/100)}
							return $limit
						}
						if($pages){return [Math]::ceiling($page.posts.count/100)}
						return $page.posts.count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026id=$id\")
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						if($currentPage.posts.post -eq $null){
							return $null
						}
						
						if($raw){
							return $currentPage.posts.post
						}else{
							$post = $currentPage.posts.post
							return @{id=$post.id;file=$post.file_url;uploaded=[dateTime]::ParseExact($post.created_at,'ddd MMM dd HH:mm:ss zzz yyyy',$null);md5=$post.md5;tags=$post.tags;rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=0\u0026limit=$limit\")
						}else{
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=0\u0026limit=100\")
						}
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						$counter=0
						for ($i=1;$i -le [Math]::ceiling($currentPage.posts.count/100);$i++){
						  forEach($post in $currentPage.posts.post){
							$creationTime = [dateTime]::ParseExact($post.created_at,'ddd MMM dd HH:mm:ss zzz yyyy',$null)
							if($raw){
								$postArray += $post
							}else{
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=$post.tags;rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  $currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=$i\u0026limit=100\")
						  try{
							$currentPage = [xml]$currentPage
						  } catch [System.Management.Automation.RuntimeException] {
						  	$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						  }
						  if($limit -gt 0){
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($limit/100) + '.')
						  }else{
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($currentPage.posts.count/100) + '.')
						  }
						}
						return $postArray
						}"
                 },
	"Shimmie":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						$page = [xml](Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts/index.xml?limit=70\u0026tags=$tags\")
						if($limit -gt 0 -and $page.posts.count -gt $limit){
							if($pages){return [Math]::ceiling($limit/70)}
							return $limit
						}
						if($pages){return [Math]::ceiling($page.posts.count/70)}
						return $page.posts.count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts/index.xml?id=$id\")
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						if($currentPage.posts.post -eq $null){
							return $null
						}
						
						if($raw){
							return $currentPage.posts.post
						}else{
							$post = $currentPage.posts.post
							if($post.file_url.startsWith('/')){
								$post.file_url = 'http://'+$ssconfig.url+$post.file_url
							}
							return @{id=$post.id;file=$post.file_url;uploaded=[dateTime]::ParseExact($post.date.split('.')[0],'yyyy-MM-dd HH:mm:ss',$null);md5=$post.md5;tags=$post.tags;rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 70 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts/index.xml?tags=$tags\u0026page=1\u0026limit=$limit\")
						}else{
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts/index.xml?tags=$tags\u0026page=1\u0026limit=70\")
						}
						
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						$counter=0
						
						for ($i=1;$i -le [Math]::ceiling($currentPage.posts.count/70);$i++){
						  forEach($post in $currentPage.posts.post){
							$creationTime = [dateTime]::ParseExact($post.date.split('.')[0],'yyyy-MM-dd HH:mm:ss',$null)
							if($raw){
								$postArray += $post
							}else{
								if($post.file_url.startsWith('/')){
									$post.file_url = 'http://'+$ssconfig.url+$post.file_url
								}
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=$post.tags;rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  $currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts/index.xml?tags=$tags\u0026page=$($i+1)\u0026limit=70\")
						  try{
							$currentPage = [xml]$currentPage
						  } catch [System.Management.Automation.RuntimeException] {
						  	$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						  }
						  
						  if($limit -gt 0){
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($limit/70) + '.')
						  }else{
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($currentPage.posts.count/70) + '.')
						  }
						}
						return $postArray
						}"
                 },
	"e621":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if(!$tags.contains(' ')){
							$page = (Invoke-WebRequest -Uri \"$($ssconfig.url)/tag_aliases.json?search[name_matches]=$tags\"|ConvertFrom-JSON)
							if($page[0].id -ne $null){
								$count=$page[0].post_count
								if($limit -gt 0 -and $count -gt $limit){
									$count=$limit
								}
								if($pages){
									return [Math]::ceiling($count/320)
								}
								return $count
							}
						}
						$page = (Invoke-WebRequest -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\"|ConvertFrom-JSON)
						$count = 0
						while($page.posts[0] -ne $null){
							$count += $page.posts.length
							$page = (Invoke-WebRequest -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\u0026page=b$($currentPage.posts[-1].id)\"|ConvertFrom-JSON)
							if($limit -gt 0 -and $count -gt $limit){
								$count=$limit
								break
							}
						}
						if($pages){return [Math]::ceiling($count/320)}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/posts.json?limit=1\u0026page=b$($id+1)\"|ConvertFrom-JSON)
						
						if($id -lt 1){
							return $null
						}
						$post = $currentPage.posts[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($post.file.url -eq $null){
							$post.file.url = ('https://static1.e621.net/data/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.' + $post.file.ext)
							if($raw){
								$post.preview.url = ('https://static1.e621.net/data/preview/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
								$post.sample.url = ('https://static1.e621.net/data/sample/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
							}
						}
						
						if($raw){
							return $post
						}else{
							$postTags = @()
							forEach($sub in $post.tags.PSObject.Properties){
								$postTags += $sub.value
							}
							return @{id=$post.id;file=$post.file.url;uploaded=[dateTime]::ParseExact($post.created_at,'yyyy-MM-ddTHH:mm:ss.FFFzzzz',$null);md5=$post.file.md5;tags=($postTags -join ' ');rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 320 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/posts.json?limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						$counter=0
						$pageCounter=1
						
						while(($currentPage.success -ne $false) -and $currentPage.posts[0] -ne $null){
						  forEach($post in $currentPage.posts){
							$creationTime = [dateTime]::ParseExact($post.created_at,'yyyy-MM-ddTHH:mm:ss.FFFzzzz',$null)
							if($post.file.url -eq $null){
								$post.file.url = ('https://static1.e621.net/data/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.' + $post.file.ext)
								if($raw){
									$post.preview.url = ('https://static1.e621.net/data/preview/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
									$post.sample.url = ('https://static1.e621.net/data/sample/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
								}
							}
							if($raw){
								$postArray += $post
							}else{
								$postTags = @()
								forEach($sub in $post.tags.PSObject.Properties){
									$postTags += $sub.value
								}
								$postArray += @{id=$post.id;file=$post.file.url;uploaded=$creationTime;md5=$post.file.md5;tags=($postTags -join ' ');rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  Write-Host $(\"Read page $pageCounter.\")
						  $pageCounter++
						  $currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\u0026page=b$($currentPage.posts[-1].id)\"|ConvertFrom-JSON)
						}
						return $postArray
						}"
                 },
	"Sankaku Complex":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($limit -eq 0){return @()}
						if($tags -eq ' '){
							$page = (Invoke-WebRequest -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=1\u0026tags=\"|ConvertFrom-JSON)
							$count = $page.data[0].id
							if($pages){return [Math]::ceiling($count/100)}
							return $count
						}
						if($tags.length -eq 1 -or !$tags.substring(1,$tags.length-2).contains(\" \")){
							$tags = $tags.replace(' ','')
							$page = (Invoke-WebRequest -Uri \"capi-v2.$($ssconfig.url)/tags/?name=$tags\u0026limit=5\"|ConvertFrom-JSON)
							if($page.count -eq 0){
								return 0
							}
							if($page[0].name_en -eq $tags){
								if($limit -gt 0 -and $page[0].count -gt $limit){
									$count=$limit
								}else{
									$count=$page[0].count
								}
							}else{
								#possibly substitute incomplete tag for complete one thru create-menu?
								return 0
							}
						}else{
							$page = (Invoke-WebRequest -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=100\u0026tags=$tags\"|ConvertFrom-JSON)
							$count = 0
							while($page.meta.next -ne $null){
								$count += 100
								if($limit -gt 0 -and $count -gt $limit){
									$count=$limit-$page.data.count
									break
								}
								$page = (Invoke-WebRequest -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=100\u0026tags=$tags\u0026next=$($page.meta.next)\"|ConvertFrom-JSON)
							}
							$count += $page.data.count
						}
						if($pages){return [Math]::ceiling($count/100)}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?tags=id_range:$id\"|ConvertFrom-JSON)
						
						if($currentPage.data.count -eq 0){
							return $null
						}
						
						$post = $currentPage.data[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($raw){
							return $post
						}else{
							[dateTime]$timeOrigin = '1970-01-01 00:00:00'
							return @{id=$post.id;file=$post.file_url;uploaded=$timeOrigin.addSeconds($post.created_at.s);md5=$post.md5;tags=($post.tags.name_en -join ' ');rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){
							$currentPage = (Invoke-WebRequest -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage = (Invoke-WebRequest -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=100\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						if($currentPage.meta.next -eq $null -or $limit -eq 0){
							return @()
						}
						$counter=0
						$pageCounter=1
						[dateTime]$timeOrigin = '1970-01-01 00:00:00'
						do{
						  forEach($post in $currentPage.data){
							$counter++
							if($raw){
								$postArray += $post
							}else{
								$creationTime = $timeOrigin.addSeconds($post.created_at.s)
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=($post.tags.name_en -join ' ');rating=$post.rating}
							}
							if($counter -eq $limit){return $postArray}
						  }
						  Write-Host $(\"Read page $pageCounter.\")
						  $pageCounter++
						  $currentPage=(Invoke-WebRequest -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=100\u0026tags=$tags\u0026next=$($currentPage.meta.next)\"|ConvertFrom-JSON)
						}while($currentPage.meta.next -eq $null)
						return $postArray
						}"
                 }
}