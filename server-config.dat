{
    "MyImouto":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 100}
						$page = Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\"
						try{
							$page = [xml]$page
						} catch [System.Management.Automation.RuntimeException] {
							$page = [xml]([System.Net.WebUtility]::HtmlDecode($page) -replace '&','&amp;')
						}
						if($limit -gt 0 -and $page.posts.count -gt $limit){return $limit}
						return $page.posts.count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=id:$id\")
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						if($currentPage.posts.post -eq $null){
							return $null
						}
						
						forEach($post in $currentPage.posts.post) {
							if($post.id -eq $id){
								if($raw){
									return $post
								}else{
									[dateTime]$timeOrigin = '1970-01-01 00:00:00'
									if($post.file_url -ne $null){
										return @{id=$post.id;file=$post.file_url;uploaded=$timeOrigin.addSeconds($post.created_at);md5=$post.md5;tags=$post.tags;rating=$post.rating}
									}
									forEach($ext in ('.png','.jpg','.gif','.mp4','.webp','.webm')){
										$HTTP_Request = [System.Net.WebRequest]::Create(\"https://$($ssconfig.url)/image/$($post.md5)${ext}\")
										$HTTP_Request.Method='HEAD'
										try{
											$HTTP_Response = $HTTP_Request.GetResponse()
										}catch{
											continue
										}
										$HTTP_Status = [int]$HTTP_Response.StatusCode
										if($HTTP_Status -eq 200){
											$HTTP_Response.Close()
											$url = \"https://$($ssconfig.url)/image/$($post.md5)${ext}\"
											return @{id=$post.id;file=$url;uploaded=$timeOrigin.addSeconds($post.created_at);md5=$post.md5;tags=$post.tags;rating=$post.rating}
										}
										$HTTP_Response.Close()
									}
									return $null
								}
							}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=1\u0026limit=$limit\")
						}else{
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=1\u0026limit=100\")
						}
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml]([System.Net.WebUtility]::HtmlDecode($currentPage) -replace '&','&amp;')
						}
						[dateTime]$timeOrigin = '1970-01-01 00:00:00'
						$counter=0
						for ($i=2;$i -le [Math]::ceiling($currentPage.posts.count/100)+1;$i++){
						  forEach($post in $currentPage.posts.post){
							$creationTime = $timeOrigin.addSeconds($post.created_at)
							if($raw){
								$postArray += $post
							}else{
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=$post.tags;rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  if($limit -gt 0){
							Write-Host $('Read page ' + $($i-1) + '/' + [Math]::ceiling($limit/100) + '.')
						  }else{
							Write-Host $('Read page ' + $($i-1) + '/' + [Math]::ceiling($currentPage.posts.count/100) + '.')
						  }
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=$i\u0026limit=100\")
						  try{
							$currentPage = [xml]$currentPage
						  } catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml]([System.Net.WebUtility]::HtmlDecode($currentPage) -replace '&','&amp;')
						  }
						}
						return $postArray
						}"
                 },
				 
	"Gelbooru": {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 100}
						$page = [xml](Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\")
						if($limit -gt 0 -and $page.posts.count -gt $limit){return $limit}
						return $page.posts.count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026id=$id\")
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						if($currentPage.posts.post -eq $null){
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=post\u0026s=view\u0026id=$id\" -UseBasicParsing)
							if($currentPage.content -notmatch 'Original image'){
							 return $null
							}
							$parser = New-Object -ComObject 'HTMLFile'
							$parser.IHTMLDocument2_write($currentPage.Content)
							if($raw){
							 return $currentPage.rawContent
							}else{
							 $info = $parser.getElementById('tag-list')
							 $file = $($info.getElementsbyTagName('A'))|?{$_.innerText -match 'Original image'}|%{$_.href}
							 $file -match '\\/([^.]{32})\\.'>$null
							 $md5 = $matches.1
							 $tags = ($info.getElementsByTagName('LI')|?{$_.className -match 'tag.+'}|%{$_.innerText.trim() -replace '\\? | \\d+$','' -replace ' ','_'}) -join ' '
							 $info.innerText -match 'Posted: ([^\\r\\n]+)'>$null
							 $date = [datetime]::Parse($matches.1)
							 $info.innerText -match 'Rating: ([^\\r\\n]+)'>$null
							 $rating = ($matches.1).toLower()

							 return @{id=$id;file=$file;uploaded=$date;md5=$md5;tags=$tags;rating=$rating}
							}
						}
						
						if($raw){
							return $currentPage.posts.post
						}else{
							$post = $currentPage.posts.post
							return @{id=$post.id;file=$post.file_url;uploaded=[dateTime]::ParseExact($post.created_at,'ddd MMM dd HH:mm:ss zzz yyyy',$null);md5=$post.md5;tags=$post.tags;rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=0\u0026limit=$limit\")
						}else{
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=0\u0026limit=100\")
						}
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						$counter=0
						for ($i=1;$i -le [Math]::ceiling($currentPage.posts.count/100);$i++){
						  forEach($post in $currentPage.posts.post){
							$creationTime = [dateTime]::ParseExact($post.created_at,'ddd MMM dd HH:mm:ss zzz yyyy',$null)
							if($raw){
								$postArray += $post
							}else{
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=$post.tags;rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=$i\u0026limit=100\")
						  try{
							$currentPage = [xml]$currentPage
						  } catch [System.Management.Automation.RuntimeException] {
						  	$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						  }
						  if($limit -gt 0){
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($limit/100) + '.')
						  }else{
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($currentPage.posts.count/100) + '.')
						  }
						}
						return $postArray
						}"
                 },
	"Danbooru": {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 200}
						if($limit -eq 0){return 0}
						if($tags -eq ' '){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=1\"|ConvertFrom-JSON)
							return $page[0].id
						}
						if($tags.length -eq 1 -or !$tags.substring(1,$tags.length-2).contains(\" \")){
							$tags = $tags.replace(' ','')
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/tags.json?search[name_like]=$tags\u0026limit=5\"|ConvertFrom-JSON)
							if($page.count -eq 0){
								return 0
							}
							if($page[0].name -eq $tags){
								if($limit -gt 0 -and $page[0].post_count -gt $limit){
									$count=$limit
								}else{
									$count=$page[0].post_count
								}
							}else{
								#possibly substitute incomplete tag for complete one thru create-menu?
								return 0
							}
						}else{
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=200\u0026tags=$tags\"|ConvertFrom-JSON)
							$count = 0
							$pageCounter = 2
							while($page[0] -ne $null){
								$count += $page.length
								$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=200\u0026tags=$tags\u0026page=$pageCounter\"|ConvertFrom-JSON)
								if($limit -gt 0 -and $count -gt $limit){
									$count=$limit
									break
								}
								$pageCounter++
							}
						}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						try{
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts/$id.json\"|ConvertFrom-JSON)
						}catch{
							Write-Error $Error[0].Exception.Message
							return $null
						}
						
						$post = $currentPage[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($raw){
							return $post
						}else{
							$date=[dateTime]::Parse($post.created_at)
							return @{id=$post.id;file=$post.file_url;uploaded=$date;md5=$post.md5;tags=($post.tag_string);rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						$postArray = @()
						if($limit -lt 200 -and $limit -gt 0){
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=200\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						if($currentPage[0] -eq $null -or $limit -eq 0){
							return @()
						}
						$counter=0
						$pageCounter=1
						do{
						  forEach($post in $currentPage){
							if($post.file_url -eq $null -and !$raw){
								continue
							}
							$counter++
							if($raw){
								$postArray += $post
							}else{
								$creationTime = $date=[dateTime]::Parse($post.created_at)
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=($post.tag_string);rating=$post.rating}
							}
							if($counter -eq $limit){return $postArray}
						  }
						  Write-Host \"Read page $pageCounter.\"
						  $pageCounter++
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=200\u0026tags=$tags\u0026page=$pageCounter\"|ConvertFrom-JSON)
						}while($currentPage[0] -ne $null)
						return $postArray
						}"
                 },
	"Shimmie":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 70}
						$page = (Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts?limit=70\u0026tags=$tags\") -replace '&#039;','&amp;#039;'
						try{
							$page = [xml]$page
						} catch [System.Management.Automation.RuntimeException] {
							$page = [xml]([System.Net.WebUtility]::HtmlDecode($page) -replace '&','&amp;')
						}
						if($limit -gt 0 -and $page.posts.count -gt $limit){return $limit}
						return $page.posts.count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts?id=$id\")
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml]([System.Net.WebUtility]::HtmlDecode($currentPage) -replace '&','&amp;')
						}
						if($currentPage.posts.tag -eq $null){
							return $null
						}
						
						if($raw){
							return $currentPage.posts.tag
						}else{
							$post = $currentPage.posts.tag
							if($post.file_url.startsWith('/')){
								$post.file_url = 'http://'+$ssconfig.url+$post.file_url
							}
							$post.file_name -match '\\.([a-z0-9]+)([^\\.]+)?$' > $null
							return @{id=$post.id;file=$post.file_url;uploaded=[dateTime]::ParseExact($post.date.split('.')[0],'yyyy-MM-dd HH:mm:ss',$null);md5=$post.md5;tags=$post.tags;rating=$post.rating;ext=$matches[1]}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 70 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts?tags=$tags\u0026page=1\u0026limit=$limit\") -replace '&#039;','&amp;#039;'
						}else{
							$currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts?tags=$tags\u0026page=1\u0026limit=70\") -replace '&#039;','&amp;#039;'
						}
						
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml]([System.Net.WebUtility]::HtmlDecode($currentPage) -replace '&','&amp;')
						}
						$counter=0
						
						for ($i=1;$i -le [Math]::ceiling($currentPage.posts.count/70);$i++){
						  forEach($post in $currentPage.posts.tag){
							$creationTime = [dateTime]::ParseExact($post.date.split('.')[0],'yyyy-MM-dd HH:mm:ss',$null)
							if($raw){
								$postArray += $post
							}else{
								if($post.file_url.startsWith('/')){
									$post.file_url = 'http://'+$ssconfig.url+$post.file_url
								}
								$post.file_name -match '\\.([a-z0-9]+)([^\\.]+)?$' > $null
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=$post.tags;rating=$post.rating;ext=$matches[1]}
							}
							
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  $currentPage=(Invoke-WebRequest -Uri \"$($ssconfig.url)/api/danbooru/find_posts?tags=$tags\u0026page=$($i+1)\u0026limit=70\") -replace '&#039;','&amp;#039;'
						  try{
							$currentPage = [xml]$currentPage
						  } catch [System.Management.Automation.RuntimeException] {
						  	$currentPage = [xml]([System.Net.WebUtility]::HtmlDecode($currentPage) -replace '&','&amp;')
						  }
						  
						  if($limit -gt 0){
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($limit/70) + '.')
						  }else{
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($currentPage.posts.count/70) + '.')
						  }
						}
						return $postArray
						}"
                 },
	"e621":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 320}
						if(!$tags.contains(' ')){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/tag_aliases.json?search[name_matches]=$tags\"|ConvertFrom-JSON)
							if($page[0].id -ne $null){
								$count=$page[0].post_count
								if($limit -gt 0 -and $count -gt $limit){
									$count=$limit
								}
								return $count
							}
						}
						$page = (Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\"|ConvertFrom-JSON)
						$count = 0
						while($page.posts[0] -ne $null){
							$count += $page.posts.length
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\u0026page=b$($page.posts[-1].id)\"|ConvertFrom-JSON)
							if($limit -gt 0 -and $count -gt $limit){
								$count=$limit
								break
							}
						}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=1\u0026page=b$($id+1)\"|ConvertFrom-JSON)
						
						if($id -lt 1){
							return $null
						}
						$post = $currentPage.posts[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($post.file.url -eq $null){
							$post.file.url = ('https://static1.e621.net/data/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.' + $post.file.ext)
							if($raw){
								$post.preview.url = ('https://static1.e621.net/data/preview/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
								$post.sample.url = ('https://static1.e621.net/data/sample/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
							}
						}
						
						if($raw){
							return $post
						}else{
							$postTags = @()
							forEach($sub in $post.tags.PSObject.Properties){
								$postTags += $sub.value
							}
							return @{id=$post.id;file=$post.file.url;uploaded=[dateTime]::ParseExact($post.created_at,'yyyy-MM-ddTHH:mm:ss.FFFzzzz',$null);md5=$post.file.md5;tags=($postTags -join ' ');rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 320 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						$counter=0
						$pageCounter=1
						
						while(($currentPage.success -ne $false) -and $currentPage.posts[0] -ne $null){
						  forEach($post in $currentPage.posts){
							$creationTime = [dateTime]::ParseExact($post.created_at,'yyyy-MM-ddTHH:mm:ss.FFFzzzz',$null)
							if($post.file.url -eq $null){
								$post.file.url = ('https://static1.e621.net/data/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.' + $post.file.ext)
								if($raw){
									$post.preview.url = ('https://static1.e621.net/data/preview/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
									$post.sample.url = ('https://static1.e621.net/data/sample/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
								}
							}
							if($raw){
								$postArray += $post
							}else{
								$postTags = @()
								forEach($sub in $post.tags.PSObject.Properties){
									$postTags += $sub.value
								}
								$postArray += @{id=$post.id;file=$post.file.url;uploaded=$creationTime;md5=$post.file.md5;tags=($postTags -join ' ');rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  Write-Host $(\"Read page $pageCounter.\")
						  $pageCounter++
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\u0026page=b$($currentPage.posts[-1].id)\"|ConvertFrom-JSON)
						}
						return $postArray
						}"
                 },
	"Sankaku Complex":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 100}
						if($limit -eq 0){return 0}
						$token = ''
						if($ssconfig.getLogin -eq $null){
							Write-Verbose 'Running anonymously this time because the login function is inaccessible.'
							$ssconfig.isAnonymous = $True
						}
						if(-not $ssconfig.isAnonymous){
							if(-not (test-path Function:/Get-Login)){
								Invoke-Expression $ssconfig.getLogin
							}
							$token = Get-Login
						}
						$headerBlob = @{'User-Agent'='SCChannelApp/4.10 (RNAndroid; black)';'platform'='black-app';'Authorization'=$token}
						if($tags -eq ' '){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=0\u0026limit=1\u0026tags=\" -Headers $headerBlob|ConvertFrom-JSON)
							return $page.data[0].id
						}
						if($tags.length -eq 1 -or !$tags.substring(1,$tags.length-2).contains(\" \")){
							$tags = $tags.replace(' ','')
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://capi-v2.$($ssconfig.url)/tags/?name=$tags\u0026limit=5\" -Headers $headerBlob|ConvertFrom-JSON)
							if($page.count -eq 0){
								return 0
							}
							if($page[0].name_en -eq ($tags -replace '_',' ')){
								if($limit -gt 0 -and $page[0].count -gt $limit){
									$count=$limit
								}else{
									$count=$page[0].count
								}
							}else{
								#possibly substitute incomplete tag for complete one thru create-menu?
								return 0
							}
						}else{
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=0\u0026limit=100\u0026tags=$tags\" -Headers $headerBlob|ConvertFrom-JSON)
							$count = 0
							while($page.meta.next -ne $null){
								$count += 100
								if($limit -gt 0 -and $count -gt $limit){
									$count=$limit-$page.data.count
									break
								}
								while($True){
									try{
										$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=0\u0026limit=100\u0026tags=$tags\u0026next=$($page.meta.next)\" -Headers $headerBlob|ConvertFrom-JSON)
										break
									}catch{
										if($_.exception.message -match '502'){
											Write-Verbose 'Error 502, resending request.'
											continue
										}
										throw $_
									}
								}
								Write-Host \"Counted page $($count/100).\"
								Start-Sleep -Seconds 1.5
							}
							$count += $page.data.count
						}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$token = ''
						if($ssconfig.getLogin -eq $null){
							Write-Verbose 'Running anonymously this time because the login function is inaccessible.'
							$ssconfig.isAnonymous = $True
						}
						if(-not $ssconfig.isAnonymous){
							if(-not (test-path Function:/Get-Login)){
								Invoke-Expression $ssconfig.getLogin
							}
							$token = Get-Login
						}
						$headerBlob = @{'User-Agent'='SCChannelApp/4.10 (RNAndroid; black)';'platform'='black-app';'Authorization'=$token}
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://capi-v2.$($ssconfig.url)/posts/keyset?tags=id_range:$id\" -Headers $headerBlob|ConvertFrom-JSON)
						
						if($currentPage.data.count -eq 0){
							return $null
						}
						
						$post = $currentPage.data[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($raw){
							return $post
						}else{
							[dateTime]$timeOrigin = '1970-01-01 00:00:00'
							return @{id=$post.id;file=$post.file_url;uploaded=$timeOrigin.addSeconds($post.created_at.s);md5=$post.md5;tags=($post.tags.name_en -join ' ');rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){$firstLimit = $limit}else{$firstLimit = 100}
						$token = ''
						if($ssconfig.getLogin -eq $null){
							Write-Verbose 'Running anonymously this time because the login function is inaccessible.'
							$ssconfig.isAnonymous = $True
						}
						if(-not $ssconfig.isAnonymous){
							if(-not (test-path Function:/Get-Login)){
								Invoke-Expression $ssconfig.getLogin
							}
							$token = Get-Login
						}
						$headerBlob = @{'User-Agent'='SCChannelApp/4.10 (RNAndroid; black)';'platform'='black-app';'Authorization'=$token}
						$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=0\u0026limit=$firstLimit\u0026tags=$tags\" -Headers $headerBlob|ConvertFrom-JSON)
						if($currentPage.data.count -eq 0 -or $limit -eq 0){
							return @()
						}
						$counter=0
						$pageCounter=1
						[dateTime]$timeOrigin = '1970-01-01 00:00:00'
						do{
							forEach($post in $currentPage.data){
								if($post.file_url -eq $null -and !$raw){
									continue
								}
								$counter++
								if($raw){
									$postArray += $post
								}else{
									$creationTime = $timeOrigin.addSeconds($post.created_at.s)
									$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=(($post.tags.name_en -replace ' ','_') -join ' ');rating=$post.rating}
								}
								
								if($counter -eq $limit){return $postArray}
							}
							Write-Host \"Read page $pageCounter.\"
							$pageCounter++
							while($True){
								try{
									$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=0\u0026limit=100\u0026tags=$tags\u0026next=$($currentPage.meta.next)\" -Headers $headerBlob|ConvertFrom-JSON)
									break
								}catch{
									if($_.exception.message -match '502'){
										Write-Verbose 'Error 502, resending request.'
										continue
									}
									throw $_
								}
							}
							Start-Sleep -Seconds 1.5
						}while($currentPage.meta.prev -ne $null)
						return $postArray
						}",
					 "getLogin":  "function Get-Login{
						#no params necessary
						if($ssconfig.isAnonymous){
							return ''
						}
						$savedLoginData = @{}
						$promptWarnStr = \"WARNING: If you select Go Anonymous, this prompt will not show up again.`n| Pick Cancel to postpone the choice until later.\"
						if($ssconfig.login -ne $null){
							#if the token exists and is less than 6 days old, use it
							if(($ssconfig.token -ne $null) -and (((Get-Date) - (Get-Date $ssconfig.lastLogin)).Days -lt 6)){
								#everything good here, token is fresh, just use it
								Write-Verbose 'Fresh token exists for server. Loading from file.'
								return $ssconfig.token
							}

							Write-Host 'Old login or token missing. Re-Logging into Sankaku...'
							$user = $ssconfig.login[0]
							$pass = $ssconfig.login[1]
						}else{
							#prompt code here
							#ask user if they want to log in, warn them that they won't see certain content unless they do.
							Write-Host (\"| Sankaku-type server selected. Would you like to log in?`n| Sankaku has a LOT of limits on what content you can see without`n| logging in. It\u0027s still usable anonymously, but certain contentious`n| content and R18 tags will not be accessible.`n| `n| To make a fully featured Sankaku account:`n| 1. Register an account on your source URL ($($ssconfig.url))`n| 2. Wait 1 week`n| 3. Post \u0026 tag a unique image`n| 4. Remove the built-in filters/blacklists in account settings`n| `n| Then enter that account\u0027s login into hentAPI.`n| `n| Would you like to login to \"+$ssconfig.url+\"?`n|`n| \"+$promptWarnStr)
							$loginChoice = Create-Menu -MenuTitle ' ' -MenuOptions ('Log In','Go Anonymous Forever', 'Cancel For Now') -DefaultSelection 0

							if($loginChoice -eq 1){
								$savedLoginData.isAnonymous=$True
								SaveTo-UserConfig -Members $savedLoginData
								return
							}elseif($loginChoice -eq 2){
								return
							}
							#user said yes
							#get username and password, make sure to make password a secure input field.
							$user = Read-Host -Prompt (\"`nEnter username for \"+$ssconfig.url)
							$pass = Read-Host -Prompt ('Enter password for '+$ssconfig.url)
						}

						#login code here
						$savedLoginData.isAnonymous = $False
						while($True){
							$tokenBits = $null
							$loginString = ConvertTo-Json @{'login'=$user;'password'=$pass}
							try{
								$loginResult = Invoke-WebRequest -Uri 'https://sankakuapi.com/auth/token' -Method Post -Body $loginString -ContentType 'application/json' -Headers @{'User-Agent'='SCChannelApp/4.10 (RNAndroid; black)';'platform'='black-app'}
								try{
									$tokenBits = ConvertFrom-Json $loginResult.content
								}catch{
									#catch an error if it's not json
									Write-Warning \"no parseable json returned! here's the content: `\"$($loginResult.content)`\"\"
								}
							}catch [System.Net.WebException]{
								Write-Warning ('webrequest errored and returned this: '+$_)
								$tokenBits = ConvertFrom-Json $_
							}

							if($tokenBits.success){
								$savedLoginData.token = ($tokenBits.token_type+' '+$tokenBits.access_token)
								$savedLoginData.login = ($user, $pass)
								$savedLoginData.lastLogin = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
								SaveTo-UserConfig -Members $savedLoginData
								return $savedLoginData.token
							}

							#let the user know the login failed for $tokenBits.code|error reason and prompt them to try again
							Write-Warning ('Login failed for the following reason: '+$tokenbits)
							
							#prompt the user if they want to try logging in again or not
							Write-Host (\"| Login failed.`n| TIP: Double-check your username and password.`n| `n| If you're 100% sure that your username and password are`n| correct but are still seeing this message, reach out to`n| me on GitHub to get it fixed.`n| `n| Would you like to try logging in again?`n| `n| \"+$promptWarnStr)
							$loginChoice = Create-Menu -MenuTitle ' ' -MenuOptions ('Log In','Go Anonymous Forever','Cancel For Now') -DefaultSelection 0
							if($loginChoice -eq 1){
								$savedLoginData.isAnonymous = $True
								SaveTo-UserConfig -Members $savedLoginData
								return
							}elseif($loginChoice -eq 2){
								return
							}

							#prompt again for user and password
							$user = Read-Host -Prompt (\"`nEnter username for \"+$ssconfig.url)
							$pass = Read-Host -Prompt ('Enter password for '+$ssconfig.url)
						}
					}"
                 },
	"Idol Complex":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 25}
						if($limit -eq 0){return 0}
						if($tags -eq ' '){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?tags=\u0026limit=1\"|ConvertFrom-JSON)
							return $page[0].id
						}
						$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?tags=$tags\u0026limit=50\"|ConvertFrom-JSON)
						$count= 0
						$pageNum = 1
						while($page.length -gt 0){
							$count += $page.length
							if($limit -gt 0 -and $count -gt $limit){
								$count = $limit
								break
							}
							$pageNum++
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?tags=$tags\u0026limit=50\u0026page=$pageNum\"|ConvertFrom-JSON)
						}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?next=$id\u0026limit=1\"|ConvertFrom-JSON)

						if($currentPage.length -eq 0){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						$post = $currentPage[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($raw){
							return $post
						}else{
							[dateTime]$timeOrigin = '1970-01-01 00:00:00'
							return @{id=$post.id;file=$post.file_url;uploaded=$timeOrigin.addSeconds($post.created_at.s);md5=$post.md5;tags=($post.tags.name -join ' ');rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						$postArray = @()
						if($limit -lt 25 -and $limit -gt 0){
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?limit=60\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						if($currentPage.length -eq 0 -or $limit -eq 0){
							return @()
						}
						$counter=0
						$pageCounter=1
						[dateTime]$timeOrigin = '1970-01-01 00:00:00'
						$prevID=$currentPage[0].id
						do{
							forEach($post in $currentPage){
								if($post.file_url -eq $null -and !$raw){
									continue
								}
							$counter++
							if($raw){
								$postArray += $post
							}else{
								$creationTime = $timeOrigin.addSeconds($post.created_at.s)
								$postArray += @{id=$post.id;file=('https:'+$post.file_url);uploaded=$creationTime;md5=$post.md5;tags=($post.tags.name -join ' ');rating=$post.rating}
							}
							if($counter -eq $limit){return $postArray}
							}
							Write-Host \"Read page $pageCounter.\"
							$pageCounter++
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?limit=60\u0026tags=$tags\u0026page=$pageCounter\"|ConvertFrom-JSON)
						}while($currentPage.length -ne 0)
							return $postArray
					}"
                 },
	"Booru.org (Gelbooru 0.1.11)":	{
					"getCount":"function Get-Count {
						param([String]$tags,[int]$limit=-1,[switch]$pages)
						if($tags -match '^(\\s|\\*)$'){
							$tags='all'
						}
						if($pages){
							return 20
						}
						while($true){
							try{
								$page = Invoke-WebRequest -Uri \"https://$($ssconfig.url)/index.php?page=post\u0026s=list\u0026tags=$tags\"
								break
							}catch [System.InvalidOperationException]{
								Start-Sleep -Milliseconds 500
								continue
							}
						}
						$pageThumbs = $page.ParsedHtml.getElementsByTagName('span')
						$postIDs = $pageThumbs|? {$_.className -eq 'thumb'}

						if(($postIDs -eq $null) -or ($limit -eq 0)){
							return 0
						}

						#If there's only one page, return the amt of posts on page 1. Otherwise, get the last page, add the offset to the amt of posts, and return the total.
						$pageLinks = $page.ParsedHtml.getElementById('paginator').children
						if($pageLinks.length -lt 4){
							$count = [int]$postIDs.count
						}else{
							$lastUrl = $pageLinks[$pageLinks.length-1].search
							$lastUrl -match 'pid=(\\d+)'\u003e$null
							while($true){
								try{
									$lastPage = Invoke-WebRequest -Uri (\"https://$($ssconfig.url)/index.php$lastUrl\")
									break
								}catch [System.InvalidOperationException]{
									Start-Sleep -Milliseconds 500
									continue
								}
							}
							$lastThumbs = $lastPage.ParsedHtml.getElementsByTagName('span')
							$lastIDs = $lastThumbs|? {$_.className -eq 'thumb'}
							$count = [int]$Matches[1] + $lastIDs.count
						}

						if($count -gt $limit -and $limit -gt 0){
							return $limit
						}else{
							return $count
						}
						}",
					"getPost":"function Get-Post {
						param([int]$id,[switch]$raw)

						$response=$null
						while($response -eq $null){
							try{
								$response = Invoke-Webrequest -Uri \"https://$($ssconfig.url)/index.php?page=post\u0026s=view\u0026id=$ID\"
							}catch [System.InvalidOperationException]{
								Start-Sleep -Milliseconds 500
								continue
							}
						}

						$url = ($response.images |? {$_.id -eq 'image'}).src

						#if url eq null then post not found
						if($url -eq $null){
							return $null
						}
						if($raw){
							return $response.content
						}

						$dataList = $response.ParsedHtml.getElementById('tag_list')
						$tagStr = ''
						forEach($tag in $dataList.children[1].children){
							$tagStr += $tag.children[0].children[0].innerText + ';'
						}
						$tagStr = $tagStr.trimEnd(';') -replace ' ','_'

						$extraInfo = ($dataList.children[1].innerText -csplit 'Statistics')[1]
						$extraInfo -match 'Posted: ([^\\r\\n]*)'\u003e$null
						$uploadDate = [datetime]::Parse($Matches[1])
						$extraInfo -match 'Size: ([^\\r\\n]*)'\u003e$null
						$size = $Matches[1].Trim(' ') -split 'x'
						$extraInfo -match 'Source:([^\\r\\n]*)'\u003e$null
						$source = $Matches[1].Trim(' ')
						$extraInfo -match 'Score: ([^\\r\\n]*)'\u003e$null
						$score = [int]$Matches[1].Trim(' ')
						$extraInfo -match 'Rating: ([^\\r\\n]*)'\u003e$null

						#can't use MD5 here because the file URL contains SHA1(MD5(image)), and i would have to de-hash the URL (stupid and unnecessary).
						return @{id=$ID;file=$url;uploaded=$uploadDate;md5='SKIP';size=$size;source=$source;score=$score;tags=$tagStr;rating=$Matches[1].toLower().Trim(' ')}
						}",
					"getTaggedPosts":"function Get-TaggedPosts {
						param([String]$tags,[switch]$raw,[int]$limit = -1,[switch]$count)
						if($tags -match '^(\\s|\\*)$'){
							$tags='all'
						}
						$page = Invoke-WebRequest -Uri \"https://$($ssconfig.url)/index.php?page=post\u0026s=list\u0026tags=$tags\"
						$pageThumbs = $page.ParsedHtml.getElementsByTagName('span')
						$postIDs = $pageThumbs|? {$_.className -eq 'thumb'}
						$postArray = @()

						if(($postIDs -eq $null) -or ($limit -eq 0)){
							return $postArray
						}

						$offset = 0
						$pageCounter = 0

						do{
							forEach($post in $postIDs){
								$id = $post.children[0].id.Substring(1)
								$postArray += Get-Post -id $id
								$limit--
								if($limit -eq 0){
									return $postArray
								}
							}

							$offset += $postIDs.length
							$pageCounter++
							Write-Host \"Read page $pageCounter.\"

							while($true){
								try{
									$page = Invoke-WebRequest -Uri \"https://$($ssconfig.url)/index.php?page=post\u0026s=list\u0026tags=$tags\u0026pid=$offset\"
									break
								}catch [System.InvalidOperationException]{
									Start-Sleep -Milliseconds 500
									continue
								}
							}
							$pageThumbs = $page.ParsedHtml.getElementsByTagName('span')
							$postIDs = $pageThumbs|? {$_.className -eq 'thumb'}

						}while($postIDs -ne $null)

						return $postArray
						}"
				}
}