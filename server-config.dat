{
    "MyImouto":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 100}
						$page = Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\"
						try{
							$page = [xml]$page
						} catch [System.Management.Automation.RuntimeException] {
							$page = [xml]([System.Net.WebUtility]::HtmlDecode($page) -replace '&','&amp;')
						}
						if($limit -gt 0 -and $page.posts.count -gt $limit){return $limit}
						return $page.posts.count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=id:$id\")
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						if($currentPage.posts.post -eq $null){
							return $null
						}
						
						forEach($post in $currentPage.posts.post) {
							if($post.id -eq $id){
								if($raw){
									return $post
								}else{
									[dateTime]$timeOrigin = '1970-01-01 00:00:00'
									if($post.file_url -ne $null){
										return @{id=$post.id;file=$post.file_url;uploaded=$timeOrigin.addSeconds($post.created_at);md5=$post.md5;tags=$post.tags;rating=$post.rating}
									}
									forEach($ext in ('.png','.jpg','.gif','.mp4','.webp','.webm')){
										$HTTP_Request = [System.Net.WebRequest]::Create(\"https://$($ssconfig.url)/image/$($post.md5)${ext}\")
										$HTTP_Request.Method='HEAD'
										try{
											$HTTP_Response = $HTTP_Request.GetResponse()
										}catch{
											continue
										}
										$HTTP_Status = [int]$HTTP_Response.StatusCode
										if($HTTP_Status -eq 200){
											$HTTP_Response.Close()
											$url = \"https://$($ssconfig.url)/image/$($post.md5)${ext}\"
											return @{id=$post.id;file=$url;uploaded=$timeOrigin.addSeconds($post.created_at);md5=$post.md5;tags=$post.tags;rating=$post.rating}
										}
										$HTTP_Response.Close()
									}
									return $null
								}
							}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=1\u0026limit=$limit\")
						}else{
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=1\u0026limit=100\")
						}
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml]([System.Net.WebUtility]::HtmlDecode($currentPage) -replace '&','&amp;')
						}
						[dateTime]$timeOrigin = '1970-01-01 00:00:00'
						$counter=0
						for ($i=2;$i -le [Math]::ceiling($currentPage.posts.count/100)+1;$i++){
						  forEach($post in $currentPage.posts.post){
							$creationTime = $timeOrigin.addSeconds($post.created_at)
							if($raw){
								$postArray += $post
							}else{
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=$post.tags;rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  if($limit -gt 0){
							Write-Host $('Read page ' + $($i-1) + '/' + [Math]::ceiling($limit/100) + '.')
						  }else{
							Write-Host $('Read page ' + $($i-1) + '/' + [Math]::ceiling($currentPage.posts.count/100) + '.')
						  }
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/post/index.xml?tags=$tags\u0026page=$i\u0026limit=100\")
						  try{
							$currentPage = [xml]$currentPage
						  } catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml]([System.Net.WebUtility]::HtmlDecode($currentPage) -replace '&','&amp;')
						  }
						}
						return $postArray
						}"
                 },
				 
	"Gelbooru": {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 100}
						$page = [xml](Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\")
						if($limit -gt 0 -and $page.posts.count -gt $limit){return $limit}
						return $page.posts.count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026id=$id\")
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						if($currentPage.posts.post -eq $null){
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=post\u0026s=view\u0026id=$id\" -UseBasicParsing)
							if($currentPage.content -notmatch 'Original image'){
							 return $null
							}
							$parser = New-Object -ComObject 'HTMLFile'
							$parser.IHTMLDocument2_write($currentPage.Content)
							if($raw){
							 return $currentPage.rawContent
							}else{
							 $info = $parser.getElementById('tag-list')
							 $file = $($info.getElementsbyTagName('A'))|?{$_.innerText -match 'Original image'}|%{$_.href}
							 $file -match '\\/([^.]{32})\\.'>$null
							 $md5 = $matches.1
							 $tags = ($info.getElementsByTagName('LI')|?{$_.className -match 'tag.+'}|%{$_.innerText.trim() -replace '\\? | \\d+$','' -replace ' ','_'}) -join ' '
							 $info.innerText -match 'Posted: ([^\\r\\n]+)'>$null
							 $date = [datetime]::Parse($matches.1)
							 $info.innerText -match 'Rating: ([^\\r\\n]+)'>$null
							 $rating = ($matches.1).toLower()

							 return @{id=$id;file=$file;uploaded=$date;md5=$md5;tags=$tags;rating=$rating}
							}
						}
						
						if($raw){
							return $currentPage.posts.post
						}else{
							$post = $currentPage.posts.post
							return @{id=$post.id;file=$post.file_url;uploaded=[dateTime]::ParseExact($post.created_at,'ddd MMM dd HH:mm:ss zzz yyyy',$null);md5=$post.md5;tags=$post.tags;rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=0\u0026limit=$limit\")
						}else{
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=0\u0026limit=100\")
						}
						try{
							$currentPage = [xml]$currentPage
						} catch [System.Management.Automation.RuntimeException] {
							$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						}
						$counter=0
						for ($i=1;$i -le [Math]::ceiling($currentPage.posts.count/100);$i++){
						  forEach($post in $currentPage.posts.post){
							$creationTime = [dateTime]::ParseExact($post.created_at,'ddd MMM dd HH:mm:ss zzz yyyy',$null)
							if($raw){
								$postArray += $post
							}else{
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=$post.tags;rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/index.php?page=dapi\u0026s=post\u0026q=index\u0026tags=$tags\u0026pid=$i\u0026limit=100\")
						  try{
							$currentPage = [xml]$currentPage
						  } catch [System.Management.Automation.RuntimeException] {
						  	$currentPage = [xml][System.Net.WebUtility]::HtmlDecode($currentPage)
						  }
						  if($limit -gt 0){
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($limit/100) + '.')
						  }else{
							Write-Host $('Read page ' + $i + '/' + [Math]::ceiling($currentPage.posts.count/100) + '.')
						  }
						}
						return $postArray
						}"
                 },
	"Danbooru": {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 200}
						if($limit -eq 0){return 0}
						if($tags -eq ' '){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=1\"|ConvertFrom-JSON)
							return $page[0].id
						}
						if($tags.length -eq 1 -or !$tags.substring(1,$tags.length-2).contains(\" \")){
							$tags = $tags.replace(' ','')
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/tags.json?search[name_like]=$tags\u0026limit=5\"|ConvertFrom-JSON)
							if($page.count -eq 0){
								return 0
							}
							if($page[0].name -eq $tags){
								if($limit -gt 0 -and $page[0].post_count -gt $limit){
									$count=$limit
								}else{
									$count=$page[0].post_count
								}
							}else{
								#possibly substitute incomplete tag for complete one thru create-menu?
								return 0
							}
						}else{
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=200\u0026tags=$tags\"|ConvertFrom-JSON)
							$count = 0
							$pageCounter = 2
							while($page[0] -ne $null){
								$count += $page.length
								$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=200\u0026tags=$tags\u0026page=$pageCounter\"|ConvertFrom-JSON)
								if($limit -gt 0 -and $count -gt $limit){
									$count=$limit
									break
								}
								$pageCounter++
							}
						}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						try{
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts/$id.json\"|ConvertFrom-JSON)
						}catch{
							Write-Error $Error[0].Exception.Message
							return $null
						}
						
						$post = $currentPage[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($raw){
							return $post
						}else{
							$date=[dateTime]::Parse($post.created_at)
							return @{id=$post.id;file=$post.file_url;uploaded=$date;md5=$post.md5;tags=($post.tag_string);rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						$postArray = @()
						if($limit -lt 200 -and $limit -gt 0){
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=200\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						if($currentPage[0] -eq $null -or $limit -eq 0){
							return @()
						}
						$counter=0
						$pageCounter=1
						do{
						  forEach($post in $currentPage){
							if($post.file_url -eq $null -and !$raw){
								continue
							}
							$counter++
							if($raw){
								$postArray += $post
							}else{
								$creationTime = $date=[dateTime]::Parse($post.created_at)
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=($post.tag_string);rating=$post.rating}
							}
							if($counter -eq $limit){return $postArray}
						  }
						  Write-Host \"Read page $pageCounter.\"
						  $pageCounter++
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://$($ssconfig.url)/posts.json?limit=200\u0026tags=$tags\u0026page=$pageCounter\"|ConvertFrom-JSON)
						}while($currentPage[0] -ne $null)
						return $postArray
						}"
                 },
	"Paheal":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 100}
						if($limit -eq 0){return 0}
						if($tags -eq \u0027 \u0027){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"api.r34.app/booru/rule34.paheal.net/posts?baseEndpoint=$($ssconfig.url)\u0026pageID=0\u0026tags=*\"|ConvertFrom-JSON)
							return $page.data[0].id
						}
						if($tags.length -eq 1 -or !$tags.substring(1,$tags.length-2).contains(\" \")){
							$tags = $tags.replace(\u0027 \u0027,\u0027\u0027)
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"api.r34.app/booru/rule34.paheal.net/tags?baseEndpoint=$($ssconfig.url)\u0026tag=$tags\u0026order=count\"|ConvertFrom-JSON)
							if($page.data.length -eq 0){
									return 0
							}
							
							$foundTag = $page.data|? {$_.name -ieq $tags}
							if($foundTag -ne $nul){
									if($limit -gt 0 -and $foundTag.count.count -gt $limit){
											$count=$limit
									}else{
											$count=$foundTag.count.count
									}
							}else{
									#substitute incomplete tag for complete one thru create-menu
									$title = \"Tag `\"$tags`\" not found. Use one of these instead?\"
									$items = $page.data.name[0..4]
									$respIndex = Create-Menu -MenuTitle $title -MenuOptions $items
									return (get-count -Tags $items[$respIndex] -Pages:$pages -Limit $limit)
							}
						}else{
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"api.r34.app/booru/rule34.paheal.net/posts?baseEndpoint=$($ssconfig.url)\u0026pageID=0\u0026tags=$tags\"|ConvertFrom-JSON)
							$count = 0
							$pageNum = 0
							while($page.data.count -ne 0){
									$count += $page.meta.items_count
									if($limit -gt 0 -and $count -gt $limit){
											$count=$limit-$page.data.count
											break
									}
									$pageNum++
									$page = (Invoke-WebRequest -UseBasicParsing -Uri \"api.r34.app/booru/rule34.paheal.net/posts?baseEndpoint=$($ssconfig.url)\u0026pageID=$pageNum\u0026tags=$tags\"|ConvertFrom-JSON)
							}
							$count += $page.data.count
						}
						return $count
					}",
					"getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"api.r34.app/booru/rule34.paheal.net/posts?baseEndpoint=$($ssconfig.url)\u0026tags=id:$id\"|ConvertFrom-JSON)

						if($currentPage.data.count -eq 0){
							return $null
						}

						$post = $currentPage.data[0]
						if($post.id -ne $id){
							Write-Warning \u0027The post you were looking for could not be found. It was probably deleted.\u0027
							return $null
						}

						if($raw){
							return $post
						}else{
							[dateTime]$timeOrigin = \u00271970-01-01 00:00:00\u0027
							$tmp = $post.high_res_file.url -match \u0027([^\\/]+)$\u0027
							return @{id=$post.id;file=$post.high_res_file.url;uploaded=$timeOrigin;md5=$matches[0];tags=($post.tags.general -join \u0027 \u0027);rating=\"explicit\"}
						}
					}",
					"getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						$postArray = @()
						if($tags -match \u0027^\\s+$\u0027){$tags = \"*\"}
						$pageURI = \"api.r34.app/booru/rule34.paheal.net/posts?baseEndpoint=$($ssconfig.url)\u0026tags=$tags\"
						if($limit -lt 100 -and $limit -gt 0){
							$pageURI += \"\u0026limit=$limit\"
						}
						$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri $pageURI|ConvertFrom-JSON)
						if($currentPage.meta.items_count -eq 0 -or $limit -eq 0){
							return @()
						}
						$counter=0
						$pageCounter=1
						[dateTime]$timeOrigin = \u00271970-01-01 00:00:00\u0027
						do{
						  forEach($post in $currentPage.data){
							if($post.high_res_file.url -eq $null -and !$raw){
								continue
							}
							$counter++
							if($raw){
								$postArray += $post
							}else{
								$tmp = $post.high_res_file.url -match \u0027([^\\/]+)$\u0027
								$ext = (Invoke-WebRequest -uri $post.high_res_file.url -Method Head).Headers.\"Content-Type\" -replace \u0027^[^\\/]+\\/\u0027,\u0027\u0027
								$postArray += @{id=$post.id;file=$post.high_res_file.url+\"?.\"+$ext;uploaded=$timeOrigin;md5=$matches[0];tags=($post.tags.general -join \" \");rating=\"explicit\"}
							}
							if($counter -eq $limit){return $postArray}
						  }
						  Write-Host \"Read page $pageCounter.\"
						  $pageCounter++
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri ($pageURI+\"\u0026pageID=$($pageCounter-1)\")|ConvertFrom-JSON)
						}while($currentPage.meta.items_count -gt 0)
						return $postArray
						}"
                 },
	"e621":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 320}
						if(!$tags.contains(' ')){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/tag_aliases.json?search[name_matches]=$tags\"|ConvertFrom-JSON)
							if($page[0].id -ne $null){
								$count=$page[0].post_count
								if($limit -gt 0 -and $count -gt $limit){
									$count=$limit
								}
								return $count
							}
						}
						$page = (Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\"|ConvertFrom-JSON)
						$count = 0
						while($page.posts[0] -ne $null){
							$count += $page.posts.length
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\u0026page=b$($page.posts[-1].id)\"|ConvertFrom-JSON)
							if($limit -gt 0 -and $count -gt $limit){
								$count=$limit
								break
							}
						}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=1\u0026page=b$($id+1)\"|ConvertFrom-JSON)
						
						if($id -lt 1){
							return $null
						}
						$post = $currentPage.posts[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($post.file.url -eq $null){
							$post.file.url = ('https://static1.e621.net/data/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.' + $post.file.ext)
							if($raw){
								$post.preview.url = ('https://static1.e621.net/data/preview/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
								$post.sample.url = ('https://static1.e621.net/data/sample/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
							}
						}
						
						if($raw){
							return $post
						}else{
							$postTags = @()
							forEach($sub in $post.tags.PSObject.Properties){
								$postTags += $sub.value
							}
							return @{id=$post.id;file=$post.file.url;uploaded=[dateTime]::ParseExact($post.created_at,'yyyy-MM-ddTHH:mm:ss.FFFzzzz',$null);md5=$post.file.md5;tags=($postTags -join ' ');rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						if($limit -eq 0){return @()}
						$postArray = @()
						if($limit -lt 320 -and $limit -gt 0){
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						$counter=0
						$pageCounter=1
						
						while(($currentPage.success -ne $false) -and $currentPage.posts[0] -ne $null){
						  forEach($post in $currentPage.posts){
							$creationTime = [dateTime]::ParseExact($post.created_at,'yyyy-MM-ddTHH:mm:ss.FFFzzzz',$null)
							if($post.file.url -eq $null){
								$post.file.url = ('https://static1.e621.net/data/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.' + $post.file.ext)
								if($raw){
									$post.preview.url = ('https://static1.e621.net/data/preview/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
									$post.sample.url = ('https://static1.e621.net/data/sample/' + $post.file.md5.Substring(0,2) + '/' + $post.file.md5.Substring(2,2) + '/' + $post.file.md5 + '.jpg')
								}
							}
							if($raw){
								$postArray += $post
							}else{
								$postTags = @()
								forEach($sub in $post.tags.PSObject.Properties){
									$postTags += $sub.value
								}
								$postArray += @{id=$post.id;file=$post.file.url;uploaded=$creationTime;md5=$post.file.md5;tags=($postTags -join ' ');rating=$post.rating}
							}
							$counter++
							if($counter -eq $limit){return $postArray}
						  }
						  Write-Host $(\"Read page $pageCounter.\")
						  $pageCounter++
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"$($ssconfig.url)/posts.json?limit=320\u0026tags=$tags\u0026page=b$($currentPage.posts[-1].id)\"|ConvertFrom-JSON)
						}
						return $postArray
						}"
                 },
	"Sankaku Complex":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 100}
						if($limit -eq 0){return 0}
						if($tags -eq ' '){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=1\u0026tags=\"|ConvertFrom-JSON)
							return $page.data[0].id
						}
						if($tags.length -eq 1 -or !$tags.substring(1,$tags.length-2).contains(\" \")){
							$tags = $tags.replace(' ','')
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"capi-v2.$($ssconfig.url)/tags/?name=$tags\u0026limit=5\"|ConvertFrom-JSON)
							if($page.count -eq 0){
								return 0
							}
							if($page[0].name_en -eq $tags){
								if($limit -gt 0 -and $page[0].count -gt $limit){
									$count=$limit
								}else{
									$count=$page[0].count
								}
							}else{
								#possibly substitute incomplete tag for complete one thru create-menu?
								return 0
							}
						}else{
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=100\u0026tags=$tags\"|ConvertFrom-JSON)
							$count = 0
							while($page.meta.next -ne $null){
								$count += 100
								if($limit -gt 0 -and $count -gt $limit){
									$count=$limit-$page.data.count
									break
								}
								$page = (Invoke-WebRequest -UseBasicParsing -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=100\u0026tags=$tags\u0026next=$($page.meta.next)\"|ConvertFrom-JSON)
								Start-Sleep -Seconds 2
							}
							$count += $page.data.count
						}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?tags=id_range:$id\"|ConvertFrom-JSON)
						
						if($currentPage.data.count -eq 0){
							return $null
						}
						
						$post = $currentPage.data[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($raw){
							return $post
						}else{
							[dateTime]$timeOrigin = '1970-01-01 00:00:00'
							return @{id=$post.id;file=$post.file_url;uploaded=$timeOrigin.addSeconds($post.created_at.s);md5=$post.md5;tags=($post.tags.name_en -join ' ');rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						$postArray = @()
						if($limit -lt 100 -and $limit -gt 0){
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=100\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						if($currentPage.meta.next -eq $null -or $limit -eq 0){
							return @()
						}
						$counter=0
						$pageCounter=1
						[dateTime]$timeOrigin = '1970-01-01 00:00:00'
						do{
						  forEach($post in $currentPage.data){
							if($post.file_url -eq $null -and !$raw){
								continue
							}
							$counter++
							if($raw){
								$postArray += $post
							}else{
								$creationTime = $timeOrigin.addSeconds($post.created_at.s)
								$postArray += @{id=$post.id;file=$post.file_url;uploaded=$creationTime;md5=$post.md5;tags=($post.tags.name_en -join ' ');rating=$post.rating}
							}
							if($counter -eq $limit){return $postArray}
						  }
						  Write-Host \"Read page $pageCounter.\"
						  $pageCounter++
						  $currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"capi-v2.$($ssconfig.url)/posts/keyset?lang=en\u0026default_threshold=1\u0026limit=100\u0026tags=$tags\u0026next=$($currentPage.meta.next)\"|ConvertFrom-JSON)
						  Start-Sleep -Seconds 2
						}while($currentPage.meta.prev -ne $null)
						return $postArray
						}"
                 },
	"Idol Complex":  {
                     "getCount":  "function Get-Count{
						param([String]$tags,[switch]$pages,[int]$limit=-1)
						if($pages){return 60}
						if($limit -eq 0){return 0}
						if($tags -eq ' '){
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?tags=\u0026limit=1\"|ConvertFrom-JSON)
							return $page[0].id
						}
						$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?tags=$tags\u0026limit=60\"|ConvertFrom-JSON)
						$count= 0
						while($page.length -gt 0){
							$count += $page.length
							if($limit -gt 0 -and $count -gt $limit){
								$count = $limit
								break
							}
							$page = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?tags=$tags\u0026limit=60\u0026next=$($page[-1].id-1)\"|ConvertFrom-JSON)
						}
						return $count
						}",
                     "getPost":  "function Get-Post{
						param([int]$id,[switch]$raw)
						$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?next=$id\u0026limit=1\"|ConvertFrom-JSON)

						if($currentPage.length -eq 0){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						$post = $currentPage[0]
						if($post.id -ne $id){
							Write-Warning 'The post you were looking for could not be found. It was probably deleted.'
							return $null
						}
						
						if($raw){
							return $post
						}else{
							[dateTime]$timeOrigin = '1970-01-01 00:00:00'
							return @{id=$post.id;file=$post.file_url;uploaded=$timeOrigin.addSeconds($post.created_at.s);md5=$post.md5;tags=($post.tags.name -join ' ');rating=$post.rating}
						}
						}",
                     "getTaggedPosts":  "function Get-TaggedPosts{
						param([String]$tags,[switch]$raw,[int]$limit=-1)
						$postArray = @()
						if($limit -lt 60 -and $limit -gt 0){
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?limit=$limit\u0026tags=$tags\"|ConvertFrom-JSON)
						}else{
							$currentPage = (Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?limit=60\u0026tags=$tags\"|ConvertFrom-JSON)
						}
						if($currentPage.length -eq 0 -or $limit -eq 0){
							return @()
						}
						$counter=0
						$pageCounter=1
						[dateTime]$timeOrigin = '1970-01-01 00:00:00'
						$prevID=$currentPage[0].id
						do{
							forEach($post in $currentPage){
								if($post.file_url -eq $null -and !$raw){
									continue
								}
							$counter++
							if($raw){
								$postArray += $post
							}else{
								$creationTime = $timeOrigin.addSeconds($post.created_at.s)
								$postArray += @{id=$post.id;file=('https:'+$post.file_url);uploaded=$creationTime;md5=$post.md5;tags=($post.tags.name -join ' ');rating=$post.rating}
							}
							if($counter -eq $limit){return $postArray}
							}
							Write-Host \"Read page $pageCounter.\"
							$pageCounter++
							$prevID=$currentPage[-1].id-1
							$currentPage=(Invoke-WebRequest -UseBasicParsing -Uri \"https://iapi.$($ssconfig.url)/post/index.json?limit=60\u0026tags=$tags\u0026next=$prevID\"|ConvertFrom-JSON)
						}while($currentPage.length -ne 0)
							return $postArray
					}"
                 }
}